/*
 * Test Oracle Class for MyPerson
 * For Use With OpenJML RAC
 *
 * Generated by JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178), 2020-05-23 16:24 +0800.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */

import java.io.PrintWriter;
import java.util.ArrayList;

import org.jmlspecs.jmlunitng.iterator.IteratorWrapper;
import org.jmlspecs.jmlunitng.iterator.ParameterArrayIterator;
import org.jmlspecs.jmlunitng.testng.BasicTestListener;
import org.jmlspecs.jmlunitng.testng.PreconditionSkipException;
import org.testng.Assert;
import org.testng.TestException;
import org.testng.TestNG;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.xml.XmlSuite;

import org.jmlspecs.utils.JmlAssertionError;
import org.jmlspecs.utils.Utils; 

/**
 * Test oracles generated by JMLUnitNG for OpenJML RAC of class
 * MyPerson.
 * 
 * @author JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178)
 * @version 2020-05-23 16:24 +0800
 */

public /*@ nullable_by_default */ class MyPerson_JML_Test {
  /**
   * The main method. Allows the tests to be run without a testng.xml or
   * the use of the TestNG executable/plugin.
   *
   * @param the_args Command line arguments, ignored.
   */
  public static void main(String[] the_args) {
    final TestNG testng_runner = new TestNG();
    final Class<?>[] classes = {MyPerson_JML_Test.class};
    final BasicTestListener listener =
      new BasicTestListener(new PrintWriter(System.out));
    testng_runner.setUseDefaultListeners(false);
    testng_runner.setXmlSuites(new ArrayList<XmlSuite>());
    testng_runner.setTestClasses(classes);
    testng_runner.addListener(listener);
    testng_runner.run();
  }

  /** 
   * A test to ensure that RAC is enabled before running other tests;
   * this also turns on RAC exceptions if they were not already turned on.
   */
  @Test
  public void test_racEnabled() {
    Utils.useExceptions = true;
    Assert.assertFalse
    (Utils.isRACCompiled(MyPerson_JML_Test.class),
     "JMLUnitNG tests must not be RAC-compiled when using OpenJML RAC.");
    Assert.assertTrue
    (Utils.isRACCompiled(MyPerson.class),
     "JMLUnitNG tests can only run on RAC-compiled code.");
  } 

  /**
   * A test for method getAge.
   *
   * @param the_test_object The MyPerson to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_getAge__0
  (final MyPerson the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getAge();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getAge__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getAcquaintanceSum.
   *
   * @param the_test_object The MyPerson to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_getAcquaintanceSum__0
  (final MyPerson the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getAcquaintanceSum();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getAcquaintanceSum__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method equals.
   *
   * @param the_test_object The MyPerson to call the test method on.
   * @param obj The Object to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_equals__Object_obj__10")
  public void test_equals__Object_obj__10
  (final MyPerson the_test_object, 
   final java.lang.Object obj) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.equals(obj);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_equals__Object_obj__10".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getAcquaintance.
   *
   * @param the_test_object The MyPerson to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_getAcquaintance__0
  (final MyPerson the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getAcquaintance();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getAcquaintance__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method isLinked.
   *
   * @param the_test_object The MyPerson to call the test method on.
   * @param person The Person to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_isLinked__Person_person__0")
  public void test_isLinked__Person_person__0
  (final MyPerson the_test_object, 
   final Person person) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.isLinked(person);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_isLinked__Person_person__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getReach.
   *
   * @param the_test_object The MyPerson to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_getReach__0
  (final MyPerson the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getReach();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getReach__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getId.
   *
   * @param the_test_object The MyPerson to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_getId__0
  (final MyPerson the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getId();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getId__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method canReach.
   *
   * @param the_test_object The MyPerson to call the test method on.
   * @param id The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_canReach__int_id__0")
  public void test_canReach__int_id__0
  (final MyPerson the_test_object, 
   final int id) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.canReach(id);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_canReach__int_id__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method addRelation.
   *
   * @param the_test_object The MyPerson to call the test method on.
   * @param friend The Person to be passed.
   * @param friendValue The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_addRelation__Person_friend__int_friendValue__0")
  public void test_addRelation__Person_friend__int_friendValue__0
  (final MyPerson the_test_object, 
   final Person friend, final int friendValue) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.addRelation(friend, friendValue);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_addRelation__Person_friend__int_friendValue__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getCharacter.
   *
   * @param the_test_object The MyPerson to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_getCharacter__0
  (final MyPerson the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getCharacter();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getCharacter__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryValue.
   *
   * @param the_test_object The MyPerson to call the test method on.
   * @param person The Person to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_queryValue__Person_person__0")
  public void test_queryValue__Person_person__0
  (final MyPerson the_test_object, 
   final Person person) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryValue(person);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryValue__Person_person__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method compareTo.
   *
   * @param the_test_object The MyPerson to call the test method on.
   * @param p2 The Person to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_compareTo__Person_p2__0")
  public void test_compareTo__Person_p2__0
  (final MyPerson the_test_object, 
   final Person p2) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.compareTo(p2);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_compareTo__Person_p2__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method delGroup.
   *
   * @param the_test_object The MyPerson to call the test method on.
   * @param group The Group to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_delGroup__Group_group__0")
  public void test_delGroup__Group_group__0
  (final MyPerson the_test_object, 
   final Group group) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.delGroup(group);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_delGroup__Group_group__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getReachSum.
   *
   * @param the_test_object The MyPerson to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_getReachSum__0
  (final MyPerson the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getReachSum();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getReachSum__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for a constructor.
   *
   * @param id The int to be passed.
   * @param name The String to be passed.
   * @param character The BigInteger to be passed.
   * @param age The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_MyPerson__int_id__String_name__BigInteger_character__int_age__20")
  public void test_MyPerson__int_id__String_name__BigInteger_character__int_age__20
  (final int id, final java.lang.String name, final java.math.BigInteger character, final int age) {
    try {
      new MyPerson(id, name, character, age);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_MyPerson__int_id__String_name__BigInteger_character__int_age__20".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method updateRelations.
   *
   * @param the_test_object The MyPerson to call the test method on.
   * @param query The int to be passed.
   * @param linkedPerson The Person to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_updateRelations__int_query__Person_linkedPerson__0")
  public void test_updateRelations__int_query__Person_linkedPerson__0
  (final MyPerson the_test_object, 
   final int query, final Person linkedPerson) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.updateRelations(query, linkedPerson);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_updateRelations__int_query__Person_linkedPerson__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getName.
   *
   * @param the_test_object The MyPerson to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_getName__0
  (final MyPerson the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getName();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getName__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method addGroup.
   *
   * @param the_test_object The MyPerson to call the test method on.
   * @param group The Group to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_addGroup__Group_group__0")
  public void test_addGroup__Group_group__0
  (final MyPerson the_test_object, 
   final Group group) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.addGroup(group);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_addGroup__Group_group__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method setReach.
   *
   * @param the_test_object The MyPerson to call the test method on.
   * @param newReach The HashMap to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_setReach__HashMap_newReach__10")
  public void test_setReach__HashMap_newReach__10
  (final MyPerson the_test_object, 
   final java.util.HashMap newReach) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.setReach(newReach);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_setReach__HashMap_newReach__10".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * Data provider for method boolean equals(Object).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_equals__Object_obj__10", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_equals__Object_obj__10() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyPerson_InstanceStrategy.class,
          MyPerson_equals__Object_obj__10__obj.class));
  }



  /**
   * Data provider for method boolean isLinked(Person).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_isLinked__Person_person__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_isLinked__Person_person__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyPerson_InstanceStrategy.class,
          MyPerson_isLinked__Person_person__0__person.class));
  }




  /**
   * Data provider for method boolean canReach(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_canReach__int_id__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_canReach__int_id__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyPerson_InstanceStrategy.class,
          MyPerson_canReach__int_id__0__id.class));
  }


  /**
   * Data provider for method void addRelation(Person, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_addRelation__Person_friend__int_friendValue__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_addRelation__Person_friend__int_friendValue__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyPerson_InstanceStrategy.class,
          MyPerson_addRelation__Person_friend__int_friendValue__0__friend.class,
                  MyPerson_addRelation__Person_friend__int_friendValue__0__friendValue.class));
  }



  /**
   * Data provider for method int queryValue(Person).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_queryValue__Person_person__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_queryValue__Person_person__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyPerson_InstanceStrategy.class,
          MyPerson_queryValue__Person_person__0__person.class));
  }


  /**
   * Data provider for method int compareTo(Person).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_compareTo__Person_p2__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_compareTo__Person_p2__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyPerson_InstanceStrategy.class,
          MyPerson_compareTo__Person_p2__0__p2.class));
  }


  /**
   * Data provider for method void delGroup(Group).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_delGroup__Group_group__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_delGroup__Group_group__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyPerson_InstanceStrategy.class,
          MyPerson_delGroup__Group_group__0__group.class));
  }



  /**
   * Data provider for constructor MyPerson(int, String, BigInteger, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_MyPerson__int_id__String_name__BigInteger_character__int_age__20", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_MyPerson__int_id__String_name__BigInteger_character__int_age__20() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyPerson_MyPerson__int_id__String_name__BigInteger_character__int_age__20__id.class,
          MyPerson_MyPerson__int_id__String_name__BigInteger_character__int_age__20__name.class,
          MyPerson_MyPerson__int_id__String_name__BigInteger_character__int_age__20__character.class,
          MyPerson_MyPerson__int_id__String_name__BigInteger_character__int_age__20__age.class));
  }


  /**
   * Data provider for method void updateRelations(int, Person).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_updateRelations__int_query__Person_linkedPerson__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_updateRelations__int_query__Person_linkedPerson__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyPerson_InstanceStrategy.class,
          MyPerson_updateRelations__int_query__Person_linkedPerson__0__query.class,
                  MyPerson_updateRelations__int_query__Person_linkedPerson__0__linkedPerson.class));
  }



  /**
   * Data provider for method void addGroup(Group).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_addGroup__Group_group__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_addGroup__Group_group__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyPerson_InstanceStrategy.class,
          MyPerson_addGroup__Group_group__0__group.class));
  }


  /**
   * Data provider for method void setReach(HashMap).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_setReach__HashMap_newReach__10", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_setReach__HashMap_newReach__10() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyPerson_InstanceStrategy.class,
          MyPerson_setReach__HashMap_newReach__10__newReach.class));
  }


  /**
   * Data provider for methods with no parameters.
   * @return An iterator over the main class strategy.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_instance_only", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_instance_only() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator(MyPerson_InstanceStrategy.class));
  }
}