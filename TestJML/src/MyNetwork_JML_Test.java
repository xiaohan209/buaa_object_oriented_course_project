/*
 * Test Oracle Class for MyNetwork
 * For Use With OpenJML RAC
 *
 * Generated by JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178), 2020-05-23 16:24 +0800.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */

import java.io.PrintWriter;
import java.util.ArrayList;

import org.jmlspecs.jmlunitng.iterator.IteratorWrapper;
import org.jmlspecs.jmlunitng.iterator.ParameterArrayIterator;
import org.jmlspecs.jmlunitng.testng.BasicTestListener;
import org.jmlspecs.jmlunitng.testng.PreconditionSkipException;
import org.testng.Assert;
import org.testng.TestException;
import org.testng.TestNG;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.xml.XmlSuite;

import org.jmlspecs.utils.JmlAssertionError;
import org.jmlspecs.utils.Utils; 

/**
 * Test oracles generated by JMLUnitNG for OpenJML RAC of class
 * MyNetwork.
 * 
 * @author JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178)
 * @version 2020-05-23 16:24 +0800
 */

public /*@ nullable_by_default */ class MyNetwork_JML_Test {
  /**
   * The main method. Allows the tests to be run without a testng.xml or
   * the use of the TestNG executable/plugin.
   *
   * @param the_args Command line arguments, ignored.
   */
  public static void main(String[] the_args) {
    final TestNG testng_runner = new TestNG();
    final Class<?>[] classes = {MyNetwork_JML_Test.class};
    final BasicTestListener listener =
      new BasicTestListener(new PrintWriter(System.out));
    testng_runner.setUseDefaultListeners(false);
    testng_runner.setXmlSuites(new ArrayList<XmlSuite>());
    testng_runner.setTestClasses(classes);
    testng_runner.addListener(listener);
    testng_runner.run();
  }

  /** 
   * A test to ensure that RAC is enabled before running other tests;
   * this also turns on RAC exceptions if they were not already turned on.
   */
  @Test
  public void test_racEnabled() {
    Utils.useExceptions = true;
    Assert.assertFalse
    (Utils.isRACCompiled(MyNetwork_JML_Test.class),
     "JMLUnitNG tests must not be RAC-compiled when using OpenJML RAC.");
    Assert.assertTrue
    (Utils.isRACCompiled(MyNetwork.class),
     "JMLUnitNG tests can only run on RAC-compiled code.");
  } 

  /**
   * A test for method queryGroupPeopleSum.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_queryGroupPeopleSum__int_id__0")
  public void test_queryGroupPeopleSum__int_id__0
  (final MyNetwork the_test_object, 
   final int id) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryGroupPeopleSum(id);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryGroupPeopleSum__int_id__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method addPerson.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param person The Person to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_addPerson__Person_person__0")
  public void test_addPerson__Person_person__0
  (final MyNetwork the_test_object, 
   final Person person) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.addPerson(person);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_addPerson__Person_person__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryAcquaintanceSum.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_queryAcquaintanceSum__int_id__0")
  public void test_queryAcquaintanceSum__int_id__0
  (final MyNetwork the_test_object, 
   final int id) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryAcquaintanceSum(id);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryAcquaintanceSum__int_id__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryGroupRelationSum.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_queryGroupRelationSum__int_id__0")
  public void test_queryGroupRelationSum__int_id__0
  (final MyNetwork the_test_object, 
   final int id) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryGroupRelationSum(id);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryGroupRelationSum__int_id__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method compareName.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id1 The int to be passed.
   * @param id2 The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_compareName__int_id1__int_id2__0")
  public void test_compareName__int_id1__int_id2__0
  (final MyNetwork the_test_object, 
   final int id1, final int id2) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.compareName(id1, id2);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_compareName__int_id1__int_id2__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method contains.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_contains__int_id__0")
  public void test_contains__int_id__0
  (final MyNetwork the_test_object, 
   final int id) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.contains(id);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_contains__int_id__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryBlockSum.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_queryBlockSum__0
  (final MyNetwork the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryBlockSum();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryBlockSum__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryGroupAgeMean.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_queryGroupAgeMean__int_id__0")
  public void test_queryGroupAgeMean__int_id__0
  (final MyNetwork the_test_object, 
   final int id) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryGroupAgeMean(id);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryGroupAgeMean__int_id__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryStrongLinked.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id1 The int to be passed.
   * @param id2 The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_queryStrongLinked__int_id1__int_id2__0")
  public void test_queryStrongLinked__int_id1__int_id2__0
  (final MyNetwork the_test_object, 
   final int id1, final int id2) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryStrongLinked(id1, id2);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryStrongLinked__int_id1__int_id2__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryValue.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id1 The int to be passed.
   * @param id2 The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_queryValue__int_id1__int_id2__0")
  public void test_queryValue__int_id1__int_id2__0
  (final MyNetwork the_test_object, 
   final int id1, final int id2) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryValue(id1, id2);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryValue__int_id1__int_id2__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method borrowFrom.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id1 The int to be passed.
   * @param id2 The int to be passed.
   * @param value The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_borrowFrom__int_id1__int_id2__int_value__0")
  public void test_borrowFrom__int_id1__int_id2__int_value__0
  (final MyNetwork the_test_object, 
   final int id1, final int id2, final int value) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.borrowFrom(id1, id2, value);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_borrowFrom__int_id1__int_id2__int_value__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryConflict.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id1 The int to be passed.
   * @param id2 The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_queryConflict__int_id1__int_id2__0")
  public void test_queryConflict__int_id1__int_id2__0
  (final MyNetwork the_test_object, 
   final int id1, final int id2) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryConflict(id1, id2);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryConflict__int_id1__int_id2__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method addGroup.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param group The Group to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_addGroup__Group_group__0")
  public void test_addGroup__Group_group__0
  (final MyNetwork the_test_object, 
   final Group group) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.addGroup(group);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_addGroup__Group_group__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getPerson.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_getPerson__int_id__0")
  public void test_getPerson__int_id__0
  (final MyNetwork the_test_object, 
   final int id) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getPerson(id);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getPerson__int_id__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method tarjan.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_tarjan__int_id__0")
  public void test_tarjan__int_id__0
  (final MyNetwork the_test_object, 
   final int id) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.tarjan(id);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_tarjan__int_id__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryGroupConflictSum.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_queryGroupConflictSum__int_id__0")
  public void test_queryGroupConflictSum__int_id__0
  (final MyNetwork the_test_object, 
   final int id) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryGroupConflictSum(id);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryGroupConflictSum__int_id__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryMoney.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_queryMoney__int_id__0")
  public void test_queryMoney__int_id__0
  (final MyNetwork the_test_object, 
   final int id) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryMoney(id);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryMoney__int_id__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for a constructor.
   *
   */
  @Test(dependsOnMethods = { "test_racEnabled" })
  public void test_MyNetwork__0
  () {
    try {
      new MyNetwork();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_MyNetwork__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryGroupAgeVar.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_queryGroupAgeVar__int_id__0")
  public void test_queryGroupAgeVar__int_id__0
  (final MyNetwork the_test_object, 
   final int id) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryGroupAgeVar(id);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryGroupAgeVar__int_id__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryPeopleSum.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_queryPeopleSum__0
  (final MyNetwork the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryPeopleSum();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryPeopleSum__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method addtoGroup.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id1 The int to be passed.
   * @param id2 The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_addtoGroup__int_id1__int_id2__0")
  public void test_addtoGroup__int_id1__int_id2__0
  (final MyNetwork the_test_object, 
   final int id1, final int id2) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.addtoGroup(id1, id2);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_addtoGroup__int_id1__int_id2__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method compareAge.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id1 The int to be passed.
   * @param id2 The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_compareAge__int_id1__int_id2__0")
  public void test_compareAge__int_id1__int_id2__0
  (final MyNetwork the_test_object, 
   final int id1, final int id2) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.compareAge(id1, id2);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_compareAge__int_id1__int_id2__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method addRelation.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id1 The int to be passed.
   * @param id2 The int to be passed.
   * @param value The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_addRelation__int_id1__int_id2__int_value__0")
  public void test_addRelation__int_id1__int_id2__int_value__0
  (final MyNetwork the_test_object, 
   final int id1, final int id2, final int value) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.addRelation(id1, id2, value);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_addRelation__int_id1__int_id2__int_value__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method delFromGroup.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id1 The int to be passed.
   * @param id2 The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_delFromGroup__int_id1__int_id2__0")
  public void test_delFromGroup__int_id1__int_id2__0
  (final MyNetwork the_test_object, 
   final int id1, final int id2) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.delFromGroup(id1, id2);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_delFromGroup__int_id1__int_id2__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryGroupValueSum.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_queryGroupValueSum__int_id__0")
  public void test_queryGroupValueSum__int_id__0
  (final MyNetwork the_test_object, 
   final int id) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryGroupValueSum(id);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryGroupValueSum__int_id__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryMinPath.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id1 The int to be passed.
   * @param id2 The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_queryMinPath__int_id1__int_id2__0")
  public void test_queryMinPath__int_id1__int_id2__0
  (final MyNetwork the_test_object, 
   final int id1, final int id2) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryMinPath(id1, id2);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryMinPath__int_id1__int_id2__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method isCircle.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id1 The int to be passed.
   * @param id2 The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_isCircle__int_id1__int_id2__0")
  public void test_isCircle__int_id1__int_id2__0
  (final MyNetwork the_test_object, 
   final int id1, final int id2) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.isCircle(id1, id2);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_isCircle__int_id1__int_id2__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryGroupSum.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_instance_only")
  public void test_queryGroupSum__0
  (final MyNetwork the_test_object ) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryGroupSum();
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryGroupSum__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryNameRank.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_queryNameRank__int_id__0")
  public void test_queryNameRank__int_id__0
  (final MyNetwork the_test_object, 
   final int id) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryNameRank(id);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryNameRank__int_id__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method queryAgeSum.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param l The int to be passed.
   * @param r The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_queryAgeSum__int_l__int_r__0")
  public void test_queryAgeSum__int_l__int_r__0
  (final MyNetwork the_test_object, 
   final int l, final int r) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.queryAgeSum(l, r);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_queryAgeSum__int_l__int_r__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method getGroup.
   *
   * @param the_test_object The MyNetwork to call the test method on.
   * @param id The int to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_getGroup__int_id__0")
  public void test_getGroup__int_id__0
  (final MyNetwork the_test_object, 
   final int id) {
      if (the_test_object == null) {
        throw new PreconditionSkipException
        ("could not construct an object to test");
      }
    try {
      the_test_object.getGroup(id);
    }
    catch (final JmlAssertionError $e) {
      if ($e.jmlAssertionType.equals("Precondition") &&
          $e.getStackTrace().length >= 4 &&
          "test_getGroup__int_id__0".equals($e.getStackTrace()[3].getMethodName())) {
        // meaningless test because precondition failed
        throw new PreconditionSkipException($e.getMessage());
      } else {
        // test failure because something else failed
        throw new TestException($e.getMessage());
      }
    } catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * Data provider for method int queryGroupPeopleSum(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_queryGroupPeopleSum__int_id__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_queryGroupPeopleSum__int_id__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_queryGroupPeopleSum__int_id__0__id.class));
  }


  /**
   * Data provider for method void addPerson(Person).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_addPerson__Person_person__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_addPerson__Person_person__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_addPerson__Person_person__0__person.class));
  }


  /**
   * Data provider for method int queryAcquaintanceSum(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_queryAcquaintanceSum__int_id__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_queryAcquaintanceSum__int_id__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_queryAcquaintanceSum__int_id__0__id.class));
  }


  /**
   * Data provider for method int queryGroupRelationSum(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_queryGroupRelationSum__int_id__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_queryGroupRelationSum__int_id__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_queryGroupRelationSum__int_id__0__id.class));
  }


  /**
   * Data provider for method int compareName(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_compareName__int_id1__int_id2__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_compareName__int_id1__int_id2__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_compareName__int_id1__int_id2__0__id1.class,
                  MyNetwork_compareName__int_id1__int_id2__0__id2.class));
  }


  /**
   * Data provider for method boolean contains(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_contains__int_id__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_contains__int_id__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_contains__int_id__0__id.class));
  }



  /**
   * Data provider for method int queryGroupAgeMean(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_queryGroupAgeMean__int_id__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_queryGroupAgeMean__int_id__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_queryGroupAgeMean__int_id__0__id.class));
  }


  /**
   * Data provider for method boolean queryStrongLinked(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_queryStrongLinked__int_id1__int_id2__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_queryStrongLinked__int_id1__int_id2__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_queryStrongLinked__int_id1__int_id2__0__id1.class,
                  MyNetwork_queryStrongLinked__int_id1__int_id2__0__id2.class));
  }


  /**
   * Data provider for method int queryValue(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_queryValue__int_id1__int_id2__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_queryValue__int_id1__int_id2__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_queryValue__int_id1__int_id2__0__id1.class,
                  MyNetwork_queryValue__int_id1__int_id2__0__id2.class));
  }


  /**
   * Data provider for method void borrowFrom(int, int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_borrowFrom__int_id1__int_id2__int_value__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_borrowFrom__int_id1__int_id2__int_value__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_borrowFrom__int_id1__int_id2__int_value__0__id1.class,
                  MyNetwork_borrowFrom__int_id1__int_id2__int_value__0__id2.class,
                  MyNetwork_borrowFrom__int_id1__int_id2__int_value__0__value.class));
  }


  /**
   * Data provider for method java.math.BigInteger queryConflict(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_queryConflict__int_id1__int_id2__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_queryConflict__int_id1__int_id2__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_queryConflict__int_id1__int_id2__0__id1.class,
                  MyNetwork_queryConflict__int_id1__int_id2__0__id2.class));
  }


  /**
   * Data provider for method void addGroup(Group).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_addGroup__Group_group__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_addGroup__Group_group__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_addGroup__Group_group__0__group.class));
  }


  /**
   * Data provider for method Person getPerson(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_getPerson__int_id__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_getPerson__int_id__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_getPerson__int_id__0__id.class));
  }


  /**
   * Data provider for method int tarjan(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_tarjan__int_id__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_tarjan__int_id__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_tarjan__int_id__0__id.class));
  }


  /**
   * Data provider for method java.math.BigInteger queryGroupConflictSum(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_queryGroupConflictSum__int_id__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_queryGroupConflictSum__int_id__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_queryGroupConflictSum__int_id__0__id.class));
  }


  /**
   * Data provider for method int queryMoney(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_queryMoney__int_id__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_queryMoney__int_id__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_queryMoney__int_id__0__id.class));
  }



  /**
   * Data provider for method int queryGroupAgeVar(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_queryGroupAgeVar__int_id__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_queryGroupAgeVar__int_id__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_queryGroupAgeVar__int_id__0__id.class));
  }



  /**
   * Data provider for method void addtoGroup(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_addtoGroup__int_id1__int_id2__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_addtoGroup__int_id1__int_id2__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_addtoGroup__int_id1__int_id2__0__id1.class,
                  MyNetwork_addtoGroup__int_id1__int_id2__0__id2.class));
  }


  /**
   * Data provider for method int compareAge(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_compareAge__int_id1__int_id2__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_compareAge__int_id1__int_id2__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_compareAge__int_id1__int_id2__0__id1.class,
                  MyNetwork_compareAge__int_id1__int_id2__0__id2.class));
  }


  /**
   * Data provider for method void addRelation(int, int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_addRelation__int_id1__int_id2__int_value__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_addRelation__int_id1__int_id2__int_value__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_addRelation__int_id1__int_id2__int_value__0__id1.class,
                  MyNetwork_addRelation__int_id1__int_id2__int_value__0__id2.class,
                  MyNetwork_addRelation__int_id1__int_id2__int_value__0__value.class));
  }


  /**
   * Data provider for method void delFromGroup(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_delFromGroup__int_id1__int_id2__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_delFromGroup__int_id1__int_id2__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_delFromGroup__int_id1__int_id2__0__id1.class,
                  MyNetwork_delFromGroup__int_id1__int_id2__0__id2.class));
  }


  /**
   * Data provider for method int queryGroupValueSum(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_queryGroupValueSum__int_id__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_queryGroupValueSum__int_id__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_queryGroupValueSum__int_id__0__id.class));
  }


  /**
   * Data provider for method int queryMinPath(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_queryMinPath__int_id1__int_id2__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_queryMinPath__int_id1__int_id2__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_queryMinPath__int_id1__int_id2__0__id1.class,
                  MyNetwork_queryMinPath__int_id1__int_id2__0__id2.class));
  }


  /**
   * Data provider for method boolean isCircle(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_isCircle__int_id1__int_id2__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_isCircle__int_id1__int_id2__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_isCircle__int_id1__int_id2__0__id1.class,
                  MyNetwork_isCircle__int_id1__int_id2__0__id2.class));
  }



  /**
   * Data provider for method int queryNameRank(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_queryNameRank__int_id__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_queryNameRank__int_id__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_queryNameRank__int_id__0__id.class));
  }


  /**
   * Data provider for method int queryAgeSum(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_queryAgeSum__int_l__int_r__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_queryAgeSum__int_l__int_r__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_queryAgeSum__int_l__int_r__0__l.class,
                  MyNetwork_queryAgeSum__int_l__int_r__0__r.class));
  }


  /**
   * Data provider for method Group getGroup(int).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_getGroup__int_id__0", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_getGroup__int_id__0() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (MyNetwork_InstanceStrategy.class,
          MyNetwork_getGroup__int_id__0__id.class));
  }


  /**
   * Data provider for methods with no parameters.
   * @return An iterator over the main class strategy.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_instance_only", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_instance_only() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator(MyNetwork_InstanceStrategy.class));
  }
}